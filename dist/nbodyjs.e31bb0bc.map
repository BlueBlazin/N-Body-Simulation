{"version":3,"sources":["qtree.js","index.js"],"names":["Region","x","y","size","newSize","ctx","beginPath","moveTo","lineTo","stroke","Node","region","body","external","NE","NW","SW","SE","cx","cy","mass","x1","y1","m1","eps","x2","y2","m2","rx","ry","r3","Math","pow","sqrt","fx","fy","theta","_equals","_calcForce","d","s","subForce","netForce","NERegion","contains","insert","NWRegion","SWRegion","SERegion","updateCenterOfMass","_insertInRegion","nodeBody","arc","PI","fill","draw","QuadTree","root","strokeRect","canvas","document","querySelector","getContext","width","window","innerWidth","height","Body","vx","vy","minMass","maxMass","massDiff","random","r","color","dt","ax","ay","fillStyle","makeBodies","n","bodies","i","signx","signy","push","makeBodiesSystem","makeBodiesSpiral","speed","noise","a","b","t","cos","sin","makeBodiesDoubleSpiral","n1","n2","getQuadTree","qt","length","remainingBodies","filter","animate","requestAnimationFrame","clearRect","forEach","force","getNetForce","update"],"mappings":"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","file":"nbodyjs.e31bb0bc.map","sourceRoot":"..","sourcesContent":["\n/************************************************************************\n* Region\n*************************************************************************/\n\nclass Region {\n  constructor(x, y, size) {\n    this.x = x;\n    this.y = y;\n    this.size = size;     /* this is really half the full size */\n  }\n\n  contains({ x, y }) {\n    return (\n      this.x - this.size <= x && \n      x < this.x + this.size && \n      this.y - this.size <= y && \n      y < this.y + this.size\n    );\n  }\n\n  NE() {\n    const { x, y, size } = this;\n    const newSize = size/2;\n    return new Region(x + newSize, y - newSize, newSize);\n  }\n\n  NW() {\n    const { x, y, size } = this;\n    const newSize = size/2;\n    return new Region(x - newSize, y - newSize, newSize);\n  }\n\n  SW() {\n    const { x, y, size } = this;\n    const newSize = size/2;\n    return new Region(x - newSize, y + newSize, newSize);\n  }\n\n  SE() {\n    const { x, y, size } = this;\n    const newSize = size/2;\n    return new Region(x + newSize, y + newSize, newSize);\n  }\n\n  draw(ctx) {\n    const { x, y, size } = this;\n    \n    ctx.beginPath();\n    ctx.moveTo(x - size, y);\n    ctx.lineTo(x + size, y);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.moveTo(x, y - size);\n    ctx.lineTo(x, y + size);\n    ctx.stroke();\n  }\n}\n\n\n/************************************************************************\n* Node \n*************************************************************************/\n\nclass Node {\n  constructor(region) {\n    this.region = region;\n    this.body = null;\n    this.external = true;\n\n    this.NE = null;\n    this.NW = null;\n    this.SW = null;\n    this.SE = null;\n\n    this.cx = 0;        /* center of mass x */\n    this.cy = 0;        /* center of mass y */\n    this.mass = 0;         /* total mass */\n  }\n\n  _equals({ x, y, mass }) {\n    return x === this.cx && y === this.cy && mass === this.mass;\n  }\n\n  _calcForce({ x: x1, y: y1, mass: m1 }, eps = 3) {\n    const { cx: x2, cy: y2, mass: m2 } = this;\n    const rx = (x2 - x1);\n    const ry = (y2 - y1);\n    const r3 = Math.pow(Math.sqrt(rx*rx + ry*ry) + eps, 3);\n\n    let fx = m1 * m2 * rx /r3;\n    let fy = m1 * m2 * ry /r3;\n    return { fx, fy };\n  }\n \n  netForce(body, theta = 0.5) {\n    let fx = 0;\n    let fy = 0;\n\n    if (this.external) {\n      return (this._equals(body) ? { fx, fy } : this._calcForce(body));\n    }\n\n    /* for internal nodes */\n    const d = Math.sqrt((this.cx - body.x)*(this.cx - body.x) + (this.cy - body.y)*(this.cy - body.y));\n    const s = this.region.size;\n\n    if (s/d < theta) {\n      return this._calcForce(body);\n    }\n\n    let subForce;\n\n    if (this.NE !== null) {\n      subForce = this.NE.netForce(body);\n      fx += subForce.fx;\n      fy += subForce.fy;\n    }\n\n    if (this.NW !== null) {\n      subForce = this.NW.netForce(body);\n      fx += subForce.fx;\n      fy += subForce.fy;\n    }\n\n    if (this.SW !== null) {\n      subForce = this.SW.netForce(body);\n      fx += subForce.fx;\n      fy += subForce.fy;\n    }\n\n    if (this.SE !== null) {\n      subForce = this.SE.netForce(body);\n      fx += subForce.fx;\n      fy += subForce.fy;\n    }\n\n    return { fx, fy };\n  }\n\n  updateCenterOfMass({ x, y, mass }) {\n    this.cx = (this.cx*this.mass + x*mass) / (this.mass + mass);\n    this.cy = (this.cy*this.mass + y*mass) / (this.mass + mass);\n    this.mass += mass;\n  }\n\n  _insertInRegion(body) {\n    /********  Check NE  *********/\n    const NERegion = this.region.NE();\n    if (NERegion.contains(body)) {\n      this.NE = this.NE === null ? new Node(NERegion) : this.NE;\n      this.NE.insert(body);\n      return;\n    }\n    /********  Check NW  *********/\n    const NWRegion = this.region.NW();\n    if (NWRegion.contains(body)) {\n      this.NW = this.NW === null ? new Node(NWRegion) : this.NW;\n      this.NW.insert(body);\n      return;\n    }\n    /********  Check SW  *********/\n    const SWRegion = this.region.SW();\n    if (SWRegion.contains(body)) {\n      this.SW = this.SW === null ? new Node(SWRegion) : this.SW;\n      this.SW.insert(body);\n      return;\n    }\n    /********  Check SE  *********/\n    const SERegion = this.region.SE();\n    if (SERegion.contains(body)) {\n      this.SE = this.SE === null ? new Node(SERegion) : this.SE;\n      this.SE.insert(body);\n      return;\n    }\n  }\n\n  insert(body) {\n    this.updateCenterOfMass(body);\n\n    /*******************************************************\n    *  No body\n    *******************************************************/\n    if (this.body === null) {\n      this.body = body;\n    }\n    /*******************************************************\n    *  Internal node\n    *******************************************************/\n    else if (!this.external) {\n      this._insertInRegion(body);\n    }\n\n    /*******************************************************\n    *  External node\n    *******************************************************/    \n    else {\n      const nodeBody = this.body;\n      this._insertInRegion(nodeBody);\n      this._insertInRegion(body);\n      this.external = false;\n      this.body = null;\n    }\n  }\n\n  draw(ctx) {\n\n    if (this.body !== null) {\n      const { x, y } = this.body;\n      ctx.beginPath();\n      ctx.arc(x, y, 1, 0, 2 * Math.PI, false);\n      ctx.fill();\n    }\n\n    if (!this.external) {\n      this.region.draw(ctx);\n    }\n\n    if (this.NE) this.NE.draw(ctx);\n    if (this.NW) this.NW.draw(ctx);\n    if (this.SW) this.SW.draw(ctx);\n    if (this.SE) this.SE.draw(ctx);\n  }\n}\n\n\n/************************************************************************\n* QuadTree\n*************************************************************************/\n\nexport default class QuadTree {\n  constructor(size) {\n    this.size = size;\n    this.root = new Node(new Region(size/2, size/2, size/2));\n  }\n\n  insert(body) {\n    this.root.insert(body);\n  }\n\n  getNetForce(body) {\n    return this.root.netForce(body);\n  }\n\n  draw(ctx) {\n    ctx.strokeRect(0, 0, this.size, this.size);\n    this.root.draw(ctx);\n  }\n}","import QuadTree from './qtree';\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerWidth;\n\nclass Body {\n  constructor(x, y, vx = 0, vy = 0, minMass = 5000, maxMass = 7000) {\n    this.x = x;\n    this.y = y;\n    const massDiff = maxMass - minMass;\n    this.mass = minMass + Math.random() * massDiff;\n    this.r = (massDiff + 2*(this.mass - minMass))/massDiff;\n    this.color = `rgb(${Math.random()*255}, 20, ${Math.random()*255})`\n    this.vx = vx;\n    this.vy = vy;\n  }\n\n  update({ fx, fy }, dt = 0.016) {\n    const ax = fx / this.mass;\n    const ay = fy / this.mass;\n\n    this.vx += (ax * dt);\n    this.vy += (ay * dt);\n\n    this.x += (this.vx * dt);\n    this.y += (this.vy * dt);\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n}\n\n\n\n/********************************************************************\n*  TEST CODE\n*********************************************************************/\n\nfunction makeBodies(n = 2) {\n  const bodies = [];\n  for (var i = 0; i < n; i++) {\n    const x = Math.random() * canvas.width;\n    const y = Math.random() * canvas.width;\n    const signx = Math.random() < 0.5 ? -1 : 1;\n    const signy = Math.random() < 0.5 ? -1 : 1;\n    const vx = (5 + Math.random()*5) * signx;\n    const vy = (5 + Math.random()*5) * signy;\n\n    const body = new Body(x, y, vx, vy);\n    bodies.push(body);\n  }\n  return bodies;\n}\n\nfunction makeBodiesSystem() {\n  const bodies = [];\n  bodies.push(new Body(canvas.width/2, canvas.height/2, 0, 0, 1990000, 1990001)); // sun\n  bodies.push(new Body(canvas.width/2 + 200, canvas.height/2 - 100, 60, 40, 1000, 1001)); // planet1\n  bodies.push(new Body(canvas.width/2 + 200, canvas.height/2 - 300, 70, 25, 1200, 1201)); // planet2\n  bodies.push(new Body(canvas.width/2 - 150, canvas.height/2 + 150, 80, 0, 1100, 1101)); // planet3\n  bodies.push(new Body(canvas.width/2 - 220, canvas.height/2 + 200, -45, 5, 1000, 1101)); // planet3\n  return bodies;\n}\n\nfunction makeBodiesSpiral(n = 1000, speed = 50, noise = 25) {\n  const bodies = [];\n\n  /** Archimedean spiral ***\n  ***  r = a + bθ \n  *************************/\n  const a = 40;\n  const b = 3;\n\n  for (var t = 0; t < n; t++) {\n    const theta = 0.1 * t;\n\n    const r = a + b * theta + (Math.random() * noise);\n    const x = canvas.width/2 + r * Math.cos(theta);\n    const y = canvas.height/2 + r * Math.sin(theta);\n    \n    let vx = -r * Math.sin(theta);\n    let vy = r * Math.cos(theta);\n    vx = speed * vx/Math.sqrt(vx*vx + vy*vy);\n    vy = speed * vy/Math.sqrt(vx*vx + vy*vy);\n    \n    bodies.push(new Body(x, y, vx, vy, 1000, 10000));\n  }\n\n  return bodies;\n}\n\nfunction makeBodiesDoubleSpiral(n1 = 700, n2 = 300, speed = 10, noise = 20) {\n  const bodies = [];\n\n  const a = 25;\n  const b = 3;\n\n  for (var t = 0; t < n1; t++) {\n    const theta = 0.1 * t;\n\n    const r = a + b * theta + (Math.random() * noise);\n    const x = (canvas.width/2 - 150) + r * Math.cos(theta);\n    const y = (canvas.height/2 + 100) + r * Math.sin(theta);\n    \n    let vx = -r * Math.sin(theta);\n    let vy = r * Math.cos(theta);\n    vx = speed * vx/Math.sqrt(vx*vx + vy*vy);\n    vy = speed * vy/Math.sqrt(vx*vx + vy*vy);\n    \n    bodies.push(new Body(x, y, vx, vy, 1000, 10000));\n  }\n\n  for (var t = 0; t < n2; t++) {\n    const theta = 0.1 * t;\n\n    const r = a + b * theta + (Math.random() * noise);\n    const x = (canvas.width/2 + 300) + r * Math.cos(theta);\n    const y = (canvas.height/2 - 50) + r * Math.sin(theta);\n    \n    let vx = -r * Math.sin(theta);\n    let vy = r * Math.cos(theta);\n    vx = speed * vx/Math.sqrt(vx*vx + vy*vy);\n    vy = speed * vy/Math.sqrt(vx*vx + vy*vy);\n    \n    bodies.push(new Body(x, y, vx, vy, 1000, 10000));\n  }\n\n  return bodies;\n}\n\nfunction getQuadTree(bodies) {\n  const qt = new QuadTree(canvas.width);\n  for (var i = 0; i < bodies.length; i++) \n    qt.insert(bodies[i]);\n  return qt;\n}\n\nfunction remainingBodies(bodies) {\n  return bodies.filter(({ x, y }) => x > 0 && x < canvas.width && y > 0 && y < canvas.height);\n}\n\n/********************************************************************\n* animation\n********************************************************************/\n\nfunction animate() {\n  window.requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  \n  bodies = remainingBodies(bodies);\n  const qt = getQuadTree(bodies);\n\n  bodies.forEach((body, i) => {\n    const force = qt.getNetForce(body)\n    body.draw(ctx);\n    body.update(force);\n  });\n}\n\nlet bodies = makeBodiesDoubleSpiral();\nanimate();"]}